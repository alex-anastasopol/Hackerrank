package ro.cst.tsearch.wrapper2;

/*
 
 *
 *
 * Created on August 4, 2003, 11:31 AM
 */

/**
 * 
 * @author Administrator
 */
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.sql.PreparedStatement;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultTreeModel;

import org.apache.log4j.Category;

import ro.cst.tsearch.database.ConnectionPool;
import ro.cst.tsearch.database.DBConnection;
import ro.cst.tsearch.database.DBManager;
import ro.cst.tsearch.database.DatabaseData;
import ro.cst.tsearch.exceptions.BaseException;

public class uploader extends javax.swing.JFrame {

	protected static final Category logger= Category.getInstance(uploader.class.getName());
	
    /** Creates new form JFrame */
    public uploader() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this
     * code. The content of this method is always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        lb_server_id = new javax.swing.JLabel();
        jt_server_id = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        lb_page_id = new javax.swing.JLabel();
        jt_page_id = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lb_tree = new javax.swing.JLabel();
        jb_browse = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jt_short = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jt_long = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        jb_insert = new javax.swing.JButton();
        jb_update = new javax.swing.JButton();
        jb_exit = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridLayout(0, 3));

        setTitle("Database upload");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm();
            }
        });

        lb_server_id.setText("Server_ID");
        getContentPane().add(lb_server_id);

        getContentPane().add(jt_server_id);

        getContentPane().add(jLabel2);

        lb_page_id.setText("Page_id");
        getContentPane().add(lb_page_id);

        getContentPane().add(jt_page_id);

        getContentPane().add(jLabel4);

        jLabel5.setText("Tree of rules");
        getContentPane().add(jLabel5);

        getContentPane().add(lb_tree);

        jb_browse.setText("Browse");
        jb_browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_browseActionPerformed();
            }
        });

        getContentPane().add(jb_browse);

        jLabel7.setText("Short Description");
        getContentPane().add(jLabel7);

        getContentPane().add(jt_short);

        getContentPane().add(jLabel8);

        jLabel9.setText("Long Description");
        getContentPane().add(jLabel9);

        getContentPane().add(jt_long);

        getContentPane().add(jLabel10);

        jb_insert.setText("Insert");
        jb_insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_insertActionPerformed();
            }
        });

        getContentPane().add(jb_insert);

        jb_update.setText("Update");
        jb_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_updateActionPerformed();
            }
        });

        getContentPane().add(jb_update);

        jb_exit.setText("exit");
        jb_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_exitActionPerformed();
            }
        });

        getContentPane().add(jb_exit);
 
        pack();
    }//GEN-END:initComponents

    private void jb_updateActionPerformed() {//GEN-FIRST:event_jb_updateActionPerformed
        // Add your handling code here:
        //validate data
        boolean rez = validate_data();
        if (rez == true) {

            DBConnection conn = null;
            try {
                //get connection
                String stm;
                logger.info("Connecting to DB....");
                conn = ConnectionPool.getInstance().requestConnection();
                logger.info("done connection");
                //		   update description fields

                stm = "UPDATE " + "TS_EXTRULES" + " SET " + " SHORT_DESC " + "=?, "
                        + " DESCRIPTION " + "=? " + "WHERE " + "SERVER_ID="
                        + Integer.parseInt(jt_server_id.getText()) + " AND " + "PAGE_ID="
                        + Integer.parseInt(jt_page_id.getText());

        		PreparedStatement pstmt = conn.prepareStatement( stm );
        		pstmt.setString( 1,  jt_short.getText() );
        		pstmt.setString( 2,  jt_long.getText() );
        		pstmt.executeUpdate();
        		pstmt.close();

                // get a valid tree ID
                Object tree_id = null;
                logger.info("getting Blob ID");
                stm = "SELECT " + "TREE_RULES_ID" + " FROM " + " TS_EXTRULES " + " WHERE " + "SERVER_ID="
                        + Integer.parseInt(jt_server_id.getText()) + " AND " + "PAGE_ID="
                        + Integer.parseInt(jt_page_id.getText());

                DatabaseData data = conn.executeSQL(stm);

                // Long intg=(Long)data.getValue(1,0);
                tree_id = data.getValue(1, 0);
                logger.info("done blob id " + tree_id);
                //get BLOB id
                PreparedStatement pStmt = conn.prepareStatement("UPDATE TS_EXTRULES_ATTACH SET DATA = ?  WHERE ID = ?");
                pStmt.setLong(2, Long.parseLong(tree_id.toString()));
                
                ByteArrayOutputStream ba = new ByteArrayOutputStream();
                ObjectOutputStream oos = new ObjectOutputStream(ba);
                
                oos.writeUnshared(model);
                pStmt.setBinaryStream(2, new ByteArrayInputStream( ba.toByteArray() ),ba.size() );
                pStmt.executeUpdate();
                pStmt.close();
                if(oos==null) oos.close();
                if(ba==null) ba.close();
                                
                
                
                conn.commit();
                //all ok
                JOptionPane.showMessageDialog(null, "UPDATE  OK!", "Update", JOptionPane.INFORMATION_MESSAGE);

            } catch (Exception e) {
                logger.error("Exception in UPDATE!: " + e);
            } finally{
    			try{
    			    ConnectionPool.getInstance().releaseConnection(conn);
    			}catch(BaseException e){
    			    logger.error("Exception in UPDATE!: " + e);
    			}			
    		}
        }
        //update the tables
    }//GEN-LAST:event_jb_updateActionPerformed

    private void jb_exitActionPerformed() {//GEN-FIRST:event_jb_exitActionPerformed
        // Add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jb_exitActionPerformed

    private boolean validate_data() {
        //check server_id to be int value
        String tmp;
        int v;
        if ((tmp = jt_server_id.getText()) != null) {
            v = 0;
            if (tmp.length() > 0) {
                v = Integer.parseInt(tmp);
                if (v <= 0) //error
                {
                    JOptionPane
                            .showMessageDialog(null, "Server id must be > 0", "Server id", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
            } else {
                JOptionPane.showMessageDialog(null, "Server id must be > 0", "Server id", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Server id must be defined", "Server id", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        //test page id
        if ((tmp = jt_page_id.getText()) != null) {
            v = 0;
            if (tmp.length() > 0) {
                v = Integer.parseInt(tmp);
                if (v <= 0) //error
                {
                    JOptionPane.showMessageDialog(null, "Page id must be > 0", "Server id", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
            } else {
                JOptionPane.showMessageDialog(null, "Page id must be > 0", "Server id", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Page id must be defined", "Server id", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        //test tree of rules
        if (model == null) {
            JOptionPane.showMessageDialog(null, "Tree of rules is null!", "Rules", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        //all ok
        return true;
    }

    private void jb_insertActionPerformed() {//GEN-FIRST:event_jb_insertActionPerformed
        // Add your handling code here:

        //validate data
        boolean rez = validate_data();
        if (rez == true) {
            String stm;
            //connect to database
            logger.info("Connecting to DB....");
            DBConnection conn = null;
            // get a valid tree ID
            PreparedStatement pStmt = null;
            long tree_id = 0;
            try {
            	//assemble data for rules attach
            	conn = ConnectionPool.getInstance().requestConnection();
                stm = "INSERT INTO TS_EXTRULES_ATTACH (DATA) VALUES (?)";
                pStmt = conn.prepareStatement(stm);
                
                ByteArrayOutputStream ba = new ByteArrayOutputStream();
                ObjectOutputStream oos = new ObjectOutputStream(ba);
                
                oos.writeUnshared(model);
                pStmt.setBinaryStream(2, new ByteArrayInputStream( ba.toByteArray() ),ba.size() );
                pStmt.executeUpdate();
                pStmt.close();
                if(oos==null) oos.close();
                if(ba==null) ba.close();
                
                tree_id = DBManager.getLastId(conn);
                
            } catch (Exception e) {
                e.printStackTrace();
            } finally{
    			try{
    			    ConnectionPool.getInstance().releaseConnection(conn);
    			}catch(BaseException e){
    			    e.printStackTrace();
    			}			
    		}

            //assemble data for rules id table
            stm = "INSERT INTO " + "TS_EXTRULES" + " ( " + "SERVER_ID" + "," + "PAGE_ID" + "," + "TREE_RULES_ID" + ","
                    + "SHORT_DESC" + "," + "DESCRIPTION" + " ) VALUES ( " + Integer.parseInt(jt_server_id.getText())
                    + "," + Integer.parseInt(jt_page_id.getText()) + "," + tree_id + ",?,?)";
            //store data
            logger.info("Storing data...");
            //commit data to rules table
            try {

                conn = ConnectionPool.getInstance().requestConnection();
                
        		PreparedStatement pstmt = conn.prepareStatement( stm );
        		pstmt.setString( 1, jt_short.getText());
        		pstmt.setString( 1, jt_long.getText());
        		pstmt.executeUpdate();
        		pstmt.close();
                
                conn.commit();

                JOptionPane.showMessageDialog(null, "INSERT  OK!", "Update", JOptionPane.INFORMATION_MESSAGE);

            } catch (Exception e) {
                e.printStackTrace();
            } finally{
    			try{
    			    ConnectionPool.getInstance().releaseConnection(conn);
    			}catch(BaseException e){
    			    e.printStackTrace();
    			}			
    		}
            
            //end store data
            logger.info("end store data");

        }
        //show results
    }//GEN-LAST:event_jb_insertActionPerformed

    private void jb_browseActionPerformed() {//GEN-FIRST:event_jb_browseActionPerformed
        // Add your handling code here:
        //open a JFilechooser with *.tre files
        tree_jc = new JFileChooser();
        //file filter settings
        tree_jc.addChoosableFileFilter(tree_filter);
        tree_jc.setAcceptAllFileFilterUsed(true);
        tree_jc.setFileFilter(tree_filter);
        //set the selected file
        if (tree_jc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            try {
                tree_file = tree_jc.getSelectedFile();
                lb_tree.setText(tree_file.getName());
                //open file & read model

                FileInputStream istream = new FileInputStream(tree_jc.getSelectedFile());
                ObjectInputStream p = new ObjectInputStream(istream);
                //read data: tree model
                model = (DefaultTreeModel) p.readObject();
                //close streams
                istream.close();
            } catch (Exception s) {
                logger.error("Error open tree file :" + s);
            }
        }
    }//GEN-LAST:event_jb_browseActionPerformed

    /** Exit the Application */
    private void exitForm() {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /**
     * @param args
     *            the command line arguments
     */
    public static void main(String args[]) {
        new uploader().show();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel10;

    private javax.swing.JLabel jLabel2;

    private javax.swing.JLabel jLabel4;

    private javax.swing.JLabel jLabel5;

    private javax.swing.JLabel jLabel7;

    private javax.swing.JLabel jLabel8;

    private javax.swing.JLabel jLabel9;

    private javax.swing.JButton jb_browse;

    private javax.swing.JButton jb_exit;

    private javax.swing.JButton jb_insert;

    private javax.swing.JButton jb_update;

    private javax.swing.JTextArea jt_long;

    private javax.swing.JTextField jt_page_id;

    private javax.swing.JTextField jt_server_id;

    private javax.swing.JTextArea jt_short;

    private javax.swing.JLabel lb_page_id;

    private javax.swing.JLabel lb_server_id;

    private javax.swing.JLabel lb_tree;

    // End of variables declaration//GEN-END:variables
    private ExampleFileFilter tree_filter = new ExampleFileFilter(new String("tre"), "Tree files");

    private JFileChooser tree_jc;

    private File tree_file;

    private DefaultTreeModel model;
}