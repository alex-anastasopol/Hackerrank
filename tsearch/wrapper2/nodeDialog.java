package ro.cst.tsearch.wrapper2;

import javax.swing.DefaultComboBoxModel;

import ro.cst.tsearch.database.ConnectionPool;
import ro.cst.tsearch.database.DBConnection;
import ro.cst.tsearch.database.DatabaseData;
import ro.cst.tsearch.exceptions.BaseException;
import org.apache.log4j.Category;
/*
 * nodeDialog.java
 * author: 
 *
 * Created on August 5, 2003, 11:19 AM
 */


public class nodeDialog extends javax.swing.JDialog {
	
	protected static final Category logger= Category.getInstance(nodeDialog.class.getName());
	
    private int node_type = 0;
    
    private int second_type = 1;
    
    private String Name=new String();
    
    /** Creates new form nodeDialog */
    public nodeDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        bg.add(jr_extract);
        bg.add(jr_iteration);
        bg.add(jr_category);
        bg.add(jr_basic);     
        update_category_list();           
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jr_extract = new javax.swing.JRadioButton();
        jt_extract = new javax.swing.JTextField();
        jr_iteration = new javax.swing.JRadioButton();
        jt_iteration = new javax.swing.JTextField();
        jr_category = new javax.swing.JRadioButton();
        jcomb_category = new javax.swing.JComboBox();
        jr_basic = new javax.swing.JRadioButton();
        jcomb_basic = new javax.swing.JComboBox();
        jb_ok = new javax.swing.JButton();
        jb_cancel = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridLayout(0, 2));

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog();
            }
        });

        jr_extract.setSelected(true);
        jr_extract.setText("Extraction");
        jr_extract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jr_extractActionPerformed();
            }
        });

        getContentPane().add(jr_extract);

        getContentPane().add(jt_extract);

        jr_iteration.setText("Iteration");
        jr_iteration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jr_iterationActionPerformed();
            }
        });

        getContentPane().add(jr_iteration);

        getContentPane().add(jt_iteration);

        jr_category.setText("Category");
        jr_category.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jr_categoryActionPerformed();
            }
        });

        getContentPane().add(jr_category);

        jcomb_category.setModel(mCategory);
        jcomb_category.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcomb_categoryItemStateChanged(evt);
            }
        });

        getContentPane().add(jcomb_category);

        jr_basic.setText("Basic Field");
        jr_basic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jr_basicActionPerformed();
            }
        });

        getContentPane().add(jr_basic);

        jcomb_basic.setModel(mBasic);
        getContentPane().add(jcomb_basic);

        jb_ok.setText("Ok");
        jb_ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_okActionPerformed();
            }
        });

        getContentPane().add(jb_ok);

        jb_cancel.setText("Cancel");
        jb_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_cancelActionPerformed();
            }
        });

        getContentPane().add(jb_cancel);

        pack();
    }//GEN-END:initComponents

    private void jcomb_categoryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcomb_categoryItemStateChanged
        // Add your handling code here:
        if(flag==1)
        {
           flag=0;
                update_basic_list();                 
           flag=1;
        }
    }//GEN-LAST:event_jcomb_categoryItemStateChanged

    private void jb_cancelActionPerformed() {//GEN-FIRST:event_jb_cancelActionPerformed
        // Add your handling code here:
        exit_type=false;
        this.hide();
    }//GEN-LAST:event_jb_cancelActionPerformed

    private void jb_okActionPerformed() {//GEN-FIRST:event_jb_okActionPerformed
        // Add your handling code here:
        //validate data
        boolean rez=true;
        
        if (jr_extract.isSelected() && (jt_extract.getText()).length()==0)
        {
            rez=false;
        }
        
        if (jr_iteration.isSelected() && (jt_iteration.getText()).length()==0)
        {
            rez=false;
        }
        
        //exit
        if(rez)
        {
           exit_type=true;
           this.hide();
        }   
    }//GEN-LAST:event_jb_okActionPerformed

    private void jr_basicActionPerformed() {//GEN-FIRST:event_jr_basicActionPerformed
        // Add your handling code here:
        node_type=node_constants.ntype_basic;
    }//GEN-LAST:event_jr_basicActionPerformed

    private void jr_categoryActionPerformed() {//GEN-FIRST:event_jr_categoryActionPerformed
        // Add your handling code here:
        node_type=node_constants.ntype_categ;
    }//GEN-LAST:event_jr_categoryActionPerformed

    private void jr_iterationActionPerformed() {//GEN-FIRST:event_jr_iterationActionPerformed
        // Add your handling code here:
        node_type=node_constants.ntype_iterat;
    }//GEN-LAST:event_jr_iterationActionPerformed

    private void jr_extractActionPerformed() {//GEN-FIRST:event_jr_extractActionPerformed
        // Add your handling code here:
        node_type=node_constants.ntype_extract;        
    }//GEN-LAST:event_jr_extractActionPerformed 
    
    /** Closes the dialog */
    private void closeDialog() {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    private void update_category_list()
    {
         //connect to db
         int i;
		String stm;      				   
		logger.info("Connecting to DB....");		
         
         //build query string
         stm=new String(
         "SELECT "
         + " LONG_DESC "
         + " FROM "
         + " TS_INFORMATION_SETS "
         + " ORDER BY "
         + " ID "
         + " ASC"
         );
         //fetch result
         DBConnection conn = null;
		 try {
		     
		    conn = ConnectionPool.getInstance().requestConnection();
			DatabaseData data = conn.executeSQL(stm);
			
			int nr=data.getRowNumber();
			flag=0;
			mCategory.removeAllElements();
           //set category list
		   for (i=0;i<nr;i++) {
		      mCategory.addElement(data.getValue(1,i));
		   }      
		   
		} catch (BaseException e) {			
			logger.error("Node dialog: fetch category exception!");
			e.printStackTrace();
		} finally {
			try{
			    ConnectionPool.getInstance().releaseConnection(conn);
			}catch(BaseException e){
			    e.printStackTrace();
			}			
		}
		
		flag=1;
		
		update_basic_list();
    }
    
    private void update_basic_list()
    {
		//connect to db
			   int i,idx;
			//   Object obj;
			   String stm;
			   
			   idx=jcomb_category.getSelectedIndex()+1;
			  // obj=mCategory.getElementAt(idx);
			         				   
			   logger.info("Connecting to DB....");			   
         
				//build query string
				stm=new String(
				"SELECT "
				+ " A.NAME "
				+ " FROM "
				+ " TS_INFSETS_BASIC_FIELDS A, TS_INFORMATION_SETS B"
				+ " WHERE A.ID_SET=B.ID AND B.ID="
				+ idx
				+ " ORDER BY "
				+ " A.ID_FIELD "
				+ " ASC"
				);
				//fetch result
				
				DBConnection conn = null;
				try {
				    
				   conn = ConnectionPool.getInstance().requestConnection();
				   DatabaseData data = conn.executeSQL(stm);
			
				   int nr=data.getRowNumber();
				   flag=0;
				   mBasic.removeAllElements();
				//   mBasic.addElement(new String("None"));
				  //set category list
				  for (i=0;i<nr;i++)
				  {
					 mBasic.addElement(data.getValue(1,i));
				  }       				
			   } catch (BaseException e) {
				   logger.error("Node dialog: fetch basic fields exception!");
				   e.printStackTrace();
			   }  finally{
					try{
					    ConnectionPool.getInstance().releaseConnection(conn);
					}catch(BaseException e){
					    e.printStackTrace();
					}			
				}
			   
			   flag=1;
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //new nodeDialog(new javax.swing.JFrame(), true).show();
        nodeDialog nd=new nodeDialog(new javax.swing.JFrame(), true);
        boolean rez=nd.showNodeDialog();
        
        logger.info("Result:"+rez+"Type :"+nd.getNodeType()+"\nName:"+nd.getNodeName());
        nd=null;
    }
    
    public boolean showNodeDialog()
    {
        show();
        while(this.isVisible());
        logger.info("Done node type selection!");
        return exit_type;
    }
    
    public int getNodeType()
    {
        return node_type;        
    }
    public int getNodeSecondType()
    {
        if(node_type==node_constants.ntype_categ)
        {
            second_type=1+jcomb_category.getSelectedIndex();
        }
        
        if(node_type==node_constants.ntype_basic)
        {
            second_type=1+jcomb_basic.getSelectedIndex();
        }                
        return second_type;        
    }
    
    public String getNodeName()
    {
        switch(node_type)
        {
            case node_constants.ntype_extract: return jt_extract.getText();
            case node_constants.ntype_iterat: return jt_iteration.getText();
            case node_constants.ntype_categ:
            {
            	return (String) jcomb_category.getSelectedItem();
            	/*
                       //switch categorii
                    switch(getNodeSecondType())
                    {
                        case node_constants.categ_GRANTOR:return new String("Grantor");
                        case node_constants.categ_ADDRESS:return new String("Address");
                    }//switch categorii
                    */
                    //  break;
            }          
            case node_constants.ntype_basic:
            {
				return (String) jcomb_basic.getSelectedItem();
				
				/*
                //switch basic fields
                switch(getNodeSecondType())
                {
                case node_constants.basic_FULLNAME:return new String("Full Name");
                case node_constants.basic_STREET:return new String("Street");
                }
                */
                 
                //break;
            }
        }//switch
        return null;
    }
    public int getCategory()
    {
       return 1+jcomb_category.getSelectedIndex();
    }
	public int getField()
	{
	   return 1+jcomb_basic.getSelectedIndex();
	}
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jb_cancel;
    private javax.swing.JButton jb_ok;
    private javax.swing.JComboBox jcomb_basic;
    private javax.swing.JComboBox jcomb_category;
    private javax.swing.JRadioButton jr_basic;
    private javax.swing.JRadioButton jr_category;
    private javax.swing.JRadioButton jr_extract;
    private javax.swing.JRadioButton jr_iteration;
    private javax.swing.JTextField jt_extract;
    private javax.swing.JTextField jt_iteration;
    // End of variables declaration//GEN-END:variables
 
    private boolean exit_type; //true if pressed ok
    private javax.swing.ButtonGroup bg=new javax.swing.ButtonGroup();
	private DefaultComboBoxModel mCategory=new DefaultComboBoxModel();
	private DefaultComboBoxModel mBasic=new DefaultComboBoxModel();
	
	// semafor operatii cu liste
	private int flag=1;
}
