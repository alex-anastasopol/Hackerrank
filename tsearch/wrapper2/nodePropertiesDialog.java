/*
 * nodePropertiesDialog.java
 *
 * Created on August 15, 2003, 11:32 AM
 */

package ro.cst.tsearch.wrapper2;

import ro.cst.tsearch.database.ConnectionPool;
import ro.cst.tsearch.database.DBConnection;
import ro.cst.tsearch.database.DatabaseData;
import ro.cst.tsearch.exceptions.BaseException;

import org.apache.log4j.Category;

/**
 * 
 * @author
 */
public class nodePropertiesDialog extends javax.swing.JDialog {

	protected static final Category logger= Category.getInstance(nodePropertiesDialog.class.getName());
    /** Creates new form nodePropertiesDialog */
    public nodePropertiesDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public nodePropertiesDialog(java.awt.Frame parent, boolean modal, my_node n) {
        super(parent, modal);
        initComponents();
        nod = n;
        postinit();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this
     * code. The content of this method is always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jl_name = new javax.swing.JLabel();
        jt_name = new javax.swing.JTextField();
        jl_node_type = new javax.swing.JLabel();
        jcomb_node_type = new javax.swing.JComboBox();
        jl_node_categ_type = new javax.swing.JLabel();
        jcomb_node_categ_type = new javax.swing.JComboBox();
        jl_node_basic_field = new javax.swing.JLabel();
        jcomb_node_basic_field = new javax.swing.JComboBox();
        jl_node_enabled = new javax.swing.JLabel();
        jcheck_enabled = new javax.swing.JCheckBox();
        jb_ok = new javax.swing.JButton();
        jb_cancel = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridLayout(0, 2));

        setName("Node Properties");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jl_name.setText("Node name:");
        getContentPane().add(jl_name);

        getContentPane().add(jt_name);

        jl_node_type.setText("Node type:");
        getContentPane().add(jl_node_type);

        jcomb_node_type.setModel(modelNodeType);
        jcomb_node_type.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcomb_node_typeItemStateChanged(evt);
            }
        });

        getContentPane().add(jcomb_node_type);

        jl_node_categ_type.setText("Node Category Type:");
        getContentPane().add(jl_node_categ_type);

        jcomb_node_categ_type.setModel(modelNodeCateg);
        jcomb_node_categ_type.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcomb_node_categ_typeItemStateChanged(evt);
            }
        });

        getContentPane().add(jcomb_node_categ_type);

        jl_node_basic_field.setText("Node Basic Field:");
        getContentPane().add(jl_node_basic_field);

        jcomb_node_basic_field.setModel(modelNodeField);
        jcomb_node_basic_field.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcomb_node_basic_fieldItemStateChanged(evt);
            }
        });

        getContentPane().add(jcomb_node_basic_field);

        jl_node_enabled.setText("Node enabled:");
        getContentPane().add(jl_node_enabled);

        jcheck_enabled.setText("Active");
        getContentPane().add(jcheck_enabled);

        jb_ok.setText("Ok");
        jb_ok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_okActionPerformed(evt);
            }
        });

        getContentPane().add(jb_ok);

        jb_cancel.setText("Cancel");
        jb_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_cancelActionPerformed(evt);
            }
        });

        getContentPane().add(jb_cancel);

        pack();
    }//GEN-END:initComponents

    private void getinf_from_node() {
        int tip = nod.getNodeType();
        //get node name
        jt_name.setText(nod.getLabel());
        //get node enabled
        jcheck_enabled.setSelected(nod.isEnabled());
        //get node primary type
        jcomb_node_type.setSelectedIndex(tip);

        try {
            if (tip == node_constants.ntype_categ || tip == node_constants.ntype_basic) {
                jt_name.setEditable(false);

                load_categories();
                //						get category number from node
                // int categ_no=nod.getNodeSecondType();
                int categ_no = nod.getNode_category_type();
                //select the category
                jcomb_node_categ_type.setSelectedIndex(categ_no - 1);

                //						if node_type==basic_field
                if (tip == node_constants.ntype_basic) {
                    load_basic_fields(jcomb_node_categ_type.getSelectedIndex());
                    jcomb_node_basic_field.setSelectedIndex(nod.getNode_basic_field() - 1);
                }
            }
        } catch (Exception e) {
            logger.error("Exception reading node info" + e);
            e.printStackTrace();
        }

    }

    private void set_inf_to_node() {
        //save name label
        nod.setLabel(jt_name.getText());
        //save node_type
        nod.setNodeType(jcomb_node_type.getSelectedIndex());
        //save node_categ_type
        nod.setNode_category_type(jcomb_node_categ_type.getSelectedIndex() + 1);
        //save node_basic_type
        nod.setNode_basic_field(jcomb_node_basic_field.getSelectedIndex() + 1);
        //save enabled state
        nod.setEnabled(jcheck_enabled.isSelected());
    }

    private void postinit() {
        //do post init stuff
        getinf_from_node();
    }

    private void jb_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_cancelActionPerformed
        // Add your handling code here:
        flag_save = false;
        setVisible(false);
        dispose();
    }//GEN-LAST:event_jb_cancelActionPerformed

    private void jb_okActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_okActionPerformed
        // Add your handling code here:
        flag_save = true;
        set_inf_to_node();

        setVisible(false);
        dispose();
    }//GEN-LAST:event_jb_okActionPerformed

    private void jcomb_node_basic_fieldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcomb_node_basic_fieldItemStateChanged
        // Add your handling code here:
        set_node_name();

    }//GEN-LAST:event_jcomb_node_basic_fieldItemStateChanged

    private void set_node_name() {
        int tip = jcomb_node_type.getSelectedIndex();
        String text = null;
        //find name
        if (tip == node_constants.ntype_categ)
            text = (String) jcomb_node_categ_type.getSelectedItem();
        else if (tip == node_constants.ntype_basic)
            text = (String) jcomb_node_basic_field.getSelectedItem();

        //set name

        jt_name.setText(text);

    }

    private void jcomb_node_categ_typeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcomb_node_categ_typeItemStateChanged
        // Add your handling code here:
        if (flag_events == 1) {
            flag_events = 0;
            //load basic fields coresponding
            //to the selected category
            load_basic_fields(jcomb_node_categ_type.getSelectedIndex());

            set_node_name();

            flag_events = 1;
        }
    }//GEN-LAST:event_jcomb_node_categ_typeItemStateChanged

    private void load_basic_fields(int idx) {
        String stm;

        DBConnection conn = null;
        try {

            logger.info("Connecting to DB....");

            //form querry string
            stm = "SELECT NAME FROM" + " TS_INFSETS_BASIC_FIELDS " + " WHERE " + " ID_SET=" + (idx + 1) + " ORDER BY "
                    + " ID_FIELD ASC";

            //load from db
            conn = ConnectionPool.getInstance().requestConnection();
            DatabaseData data = conn.executeSQL(stm);

            //set basic field combo content
            int i, n;
            n = data.getRowNumber();
            modelNodeField.removeAllElements();
            for (i = 0; i < n; i++) {
                modelNodeField.addElement(data.getValue(1, i));
            }
        } catch (Exception e) {
            logger.error("Exception load_basic_fileds: " + e);
            e.printStackTrace();
        } finally {
            try {
                ConnectionPool.getInstance().releaseConnection(conn);
            } catch (BaseException e) {
                e.printStackTrace();
            }
        }
    }

    private void load_categories() {
        
        DBConnection conn = null;
        try {
            //connect to db
            logger.info("Connecting to DB....");
            
            //fetch category's from database
            String stm;

            stm = "SELECT LONG_DESC FROM" + " TS_INFORMATION_SETS " + " ORDER BY " + " ID ASC";

            conn = ConnectionPool.getInstance().requestConnection();
            DatabaseData data = conn.executeSQL(stm);

            //set category combo content
            int i, n;
            n = data.getRowNumber();
            modelNodeCateg.removeAllElements();
            for (i = 0; i < n; i++) {
                modelNodeCateg.addElement(data.getValue(1, i));
            }
            
        } catch (Exception e) {
            logger.error("Exception load_categories" + e);
            e.printStackTrace();
        } finally {
            try {
                ConnectionPool.getInstance().releaseConnection(conn);
            } catch (BaseException e) {
                e.printStackTrace();
            }
        }
    }

    private void jcomb_node_typeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcomb_node_typeItemStateChanged
        // Add your handling code here:
        if (flag_events == 1) {
            flag_events = 0;
            //get new type
            int tip = jcomb_node_type.getSelectedIndex();
            if (tip == node_constants.ntype_categ) {
                //load categs from DB
                load_categories();
            }
            if (tip == node_constants.ntype_basic) {
                load_basic_fields(jcomb_node_categ_type.getSelectedIndex());
            }

            if (tip == node_constants.ntype_extract || tip == node_constants.ntype_iterat)
                jt_name.setEditable(true);
            else
                jt_name.setEditable(false);
            flag_events = 1;
        }
    }//GEN-LAST:event_jcomb_node_typeItemStateChanged

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    public boolean showNodePropertiesDialog() {
        show();
        while (this.isVisible())
            ;
        logger.info("Done node type selection!");
        return flag_save;
    }

    /**
     * @param args
     *            the command line arguments
     */
    public static void main(String args[]) {
        new nodePropertiesDialog(new javax.swing.JFrame(), true).show();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jb_cancel;

    private javax.swing.JButton jb_ok;

    private javax.swing.JCheckBox jcheck_enabled;

    private javax.swing.JComboBox jcomb_node_basic_field;

    private javax.swing.JComboBox jcomb_node_categ_type;

    private javax.swing.JComboBox jcomb_node_type;

    private javax.swing.JLabel jl_name;

    private javax.swing.JLabel jl_node_basic_field;

    private javax.swing.JLabel jl_node_categ_type;

    private javax.swing.JLabel jl_node_enabled;

    private javax.swing.JLabel jl_node_type;

    private javax.swing.JTextField jt_name;

    // End of variables declaration//GEN-END:variables

    private my_node nod = null;

    //true if exited by pressing ok button
    private boolean flag_save;

    //modele jcombo
    private javax.swing.DefaultComboBoxModel modelNodeType = new javax.swing.DefaultComboBoxModel(new String[] {
            "Extraction", "Iteration", "Category", "Basic Field" });

    private javax.swing.DefaultComboBoxModel modelNodeCateg = new javax.swing.DefaultComboBoxModel();

    private javax.swing.DefaultComboBoxModel modelNodeField = new javax.swing.DefaultComboBoxModel();

    private int flag_events = 1;
}