package ro.cst.tsearch.instructor;


/**
 * deprecated
 *
 * @author  Administrator
 */ 
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Vector;

import javax.swing.JFileChooser;

import ro.cst.tsearch.wrapper2.ExampleFileFilter;
import ro.cst.tsearch.wrapper2.action;
import ro.cst.tsearch.wrapper2.my_rule;
import ro.cst.tsearch.wrapper2.my_token;
import ro.cst.tsearch.wrapper2.patternToken;

import org.apache.log4j.Logger;

public class ruleeditor extends javax.swing.JFrame 

implements Runnable
{
	private static final Logger logger = Logger.getLogger(ruleeditor.class);
	
    /** Creates new form ruleeditor */
    public ruleeditor() {
        initComponents();
    }
    
    public ruleeditor(my_rule FWR,my_rule BKR,String Name) {
        initComponents();
       
         
         
         rules_saved=false;

           if(FWR!=null)
              rule_fwd=(my_rule)FWR.clone();
           else
           {           
              rule_fwd=new my_rule(Name);
			  rule_fwd.setType(my_rule.RULE_EXTRACT);
           }   
              
          if(BKR!=null)       
               rule_bkd=(my_rule)BKR.clone();          
		  else
		  {
			rule_bkd=new my_rule(Name);
			rule_bkd.setType(my_rule.RULE_EXTRACT);
		  }
			
    }
    
    public void run() {        
        logger.info("Running Rule editor...");                
        crt_rule=rule_fwd;                
        update_actions(); 
        update_results();       
        this.show();                
        logger.info("Done Rule editor");
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jb_refresh = new javax.swing.JButton();
        jb_fwd_rule = new javax.swing.JButton();
        jb_back_rule = new javax.swing.JButton();
        jb_save_rule_disk = new javax.swing.JButton();
        jb_load_rule_disk = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jb_save = new javax.swing.JButton();
        jb_exit = new javax.swing.JButton();
        jSplitPane4 = new javax.swing.JSplitPane();
        jPanel4 = new javax.swing.JPanel();
        jl_actions = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        list_actions = new javax.swing.JList();
        jPanel6 = new javax.swing.JPanel();
        jb_act_add = new javax.swing.JButton();
        jb_act_delete = new javax.swing.JButton();
        jb_act_insert = new javax.swing.JButton();
        jb_act_set = new javax.swing.JButton();
        lb_act_type = new javax.swing.JLabel();
        act_types = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        lb_pattern = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        list_token = new javax.swing.JList();
        jPanel7 = new javax.swing.JPanel();
        jb_tok_add = new javax.swing.JButton();
        jb_tok_delete = new javax.swing.JButton();
        jb_tok_insert = new javax.swing.JButton();
        jb_tok_set = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        lb_match = new javax.swing.JLabel();
        token_match_type = new javax.swing.JComboBox();
        lb_token_type = new javax.swing.JLabel();
        token_type = new javax.swing.JComboBox();
        lb_token_text = new javax.swing.JLabel();
        jt_token = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        result_pane = new javax.swing.JTextPane();

        getContentPane().setLayout(new java.awt.GridLayout(2, 1));

        setTitle("Rule editor 1.0");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jSplitPane2.setPreferredSize(new java.awt.Dimension(780, 450));
        jPanel1.setMinimumSize(new java.awt.Dimension(100, 400));
        jPanel1.setPreferredSize(new java.awt.Dimension(100, 400));
        jb_refresh.setText("Refresh");
        jb_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_refreshActionPerformed(evt);
            }
        });

        jPanel1.add(jb_refresh);

        jb_fwd_rule.setText("Forward rule");
        jb_fwd_rule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_fwd_ruleActionPerformed(evt);
            }
        });

        jPanel1.add(jb_fwd_rule);

        jb_back_rule.setText("Backward Rule");
        jb_back_rule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_back_ruleActionPerformed(evt);
            }
        });

        jPanel1.add(jb_back_rule);

        jb_save_rule_disk.setText("Save rule to disk");
        jb_save_rule_disk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_save_rule_diskActionPerformed(evt);
            }
        });

        jPanel1.add(jb_save_rule_disk);

        jb_load_rule_disk.setText("Load rule from disk");
        jb_load_rule_disk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_load_rule_diskActionPerformed(evt);
            }
        });

        jPanel1.add(jb_load_rule_disk);

        jPanel1.add(jSeparator1);

        jb_save.setText("Save & exit");
        jb_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_saveActionPerformed(evt);
            }
        });

        jPanel1.add(jb_save);

        jb_exit.setText("Exit");
        jb_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_exitActionPerformed(evt);
            }
        });

        jPanel1.add(jb_exit);

        jSplitPane2.setLeftComponent(jPanel1);

        jSplitPane4.setPreferredSize(new java.awt.Dimension(600, 400));
        jSplitPane4.setAutoscrolls(true);
        jPanel4.setLayout(new java.awt.GridLayout(0, 2));

        jPanel4.setMinimumSize(new java.awt.Dimension(174, 300));
        jPanel4.setPreferredSize(new java.awt.Dimension(280, 350));
        jl_actions.setText("Actions:");
        jPanel4.add(jl_actions);

        jPanel4.add(jLabel2);

        jScrollPane2.setPreferredSize(new java.awt.Dimension(200, 131));
        list_actions.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        list_actions.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                list_actionsValueChanged(evt);
            }
        });

        jScrollPane2.setViewportView(list_actions);

        jPanel4.add(jScrollPane2);

        jPanel6.setLayout(new java.awt.GridLayout(0, 1));

        jb_act_add.setText("Add");
        jb_act_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_act_addActionPerformed(evt);
            }
        });

        jPanel6.add(jb_act_add);

        jb_act_delete.setText("Delete");
        jb_act_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_act_deleteActionPerformed(evt);
            }
        });

        jPanel6.add(jb_act_delete);

        jb_act_insert.setText("Insert");
        jb_act_insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_act_insertActionPerformed(evt);
            }
        });

        jPanel6.add(jb_act_insert);

        jb_act_set.setText("Set");
        jb_act_set.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_act_setActionPerformed(evt);
            }
        });

        jPanel6.add(jb_act_set);

        jPanel4.add(jPanel6);

        lb_act_type.setText("Type");
        jPanel4.add(lb_act_type);

        act_types.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SKIP_TO", "SKIP_WHILE", "SKIP_UNTIL", "SKIP_NR","SKIP_NRFW" }));
        jPanel4.add(act_types);

        jSplitPane4.setLeftComponent(jPanel4);

        jPanel5.setLayout(new java.awt.GridLayout(0, 1));

        jPanel5.setMinimumSize(new java.awt.Dimension(238, 300));
        jPanel5.setPreferredSize(new java.awt.Dimension(280, 350));
        lb_pattern.setFont(new java.awt.Font("Dialog", 1, 14));
        lb_pattern.setText("Pattern Tokens");
        jPanel5.add(lb_pattern);

        jPanel9.setLayout(new java.awt.GridLayout(1, 2));

        jPanel9.setMinimumSize(new java.awt.Dimension(140, 200));
        jPanel9.setPreferredSize(new java.awt.Dimension(250, 200));
        list_token.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        list_token.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                list_tokenValueChanged(evt);
            }
        });

        jScrollPane3.setViewportView(list_token);

        jPanel9.add(jScrollPane3);

        jPanel7.setLayout(new java.awt.GridLayout(0, 1));

        jb_tok_add.setText("Add");
        jb_tok_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_tok_addActionPerformed(evt);
            }
        });

        jPanel7.add(jb_tok_add);

        jb_tok_delete.setText("Delete");
        jb_tok_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_tok_deleteActionPerformed(evt);
            }
        });

        jPanel7.add(jb_tok_delete);

        jb_tok_insert.setText("Insert");
        jb_tok_insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_tok_insertActionPerformed(evt);
            }
        });

        jPanel7.add(jb_tok_insert);

        jb_tok_set.setText("Set");
        jb_tok_set.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_tok_setActionPerformed(evt);
            }
        });

        jPanel7.add(jb_tok_set);

        jPanel9.add(jPanel7);

        jPanel5.add(jPanel9);

        jPanel11.setLayout(new java.awt.GridLayout(0, 2));

        lb_match.setText("Match type :");
        jPanel11.add(lb_match);

        token_match_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "EXACT", "IGNORE CASE", "CLASS","ANY" }));
        jPanel11.add(token_match_type);

        lb_token_type.setText("Token Type :");
        jPanel11.add(lb_token_type);

        token_type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "TK_TAG", "TK_NUMERIC", "TK_ALFANUMERIC", "TK_PUNCTUATION", "TK_STRING", "TK_ALFABETIC", "TK_ANY", "TK_SPECIAL" }));
        jPanel11.add(token_type);

        lb_token_text.setText("Text :");
        jPanel11.add(lb_token_text);

        jPanel11.add(jt_token);

        jPanel5.add(jPanel11);

        jSplitPane4.setRightComponent(jPanel5);

        jSplitPane2.setRightComponent(jSplitPane4);

        getContentPane().add(jSplitPane2);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(600, 200));
        result_pane.setEditable(false);
        result_pane.setPreferredSize(new java.awt.Dimension(500, 100));
        jScrollPane1.setViewportView(result_pane);

        getContentPane().add(jScrollPane1);

        pack();
    }//GEN-END:initComponents

    private void list_tokenValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_list_tokenValueChanged
        // Add your handling code here:
          int sel_idx=list_token.getSelectedIndex();        
			   if(sel_idx!=-1)
			   {             				   
			   int mtype;///match type
			   int ttype;// token type
			   
			   logger.info("Am ajuns in list_token_value changed");
			   
			   patternToken pt=(patternToken)crt_tokens.get(sel_idx);;
			   my_token mt=pt.getToken();
			   String text=mt.toString();
			   
			   ttype=mt.cod;
			   mtype=pt.getMatchType();
				
					 token_match_type.setSelectedIndex(mtype);
					 token_type.setSelectedIndex(ttype-1);
					  jt_token.setText(text);          					 
			   } 
    }//GEN-LAST:event_list_tokenValueChanged
    
    

    /**
	 * 
	 */
	private void postinit() {
		// TODO Auto-generated method stub
		
		//init rule_file_path
		rule_path=null;				
		//configure file_filter for rules
		rules_file_filter=new ExampleFileFilter(new String("rl"),"Rules Files");
		 
		
	}

	private void jb_load_rule_diskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_load_rule_diskActionPerformed
        // Add your handling code here:
        my_rule r;
        
        r=load_rule_from_disk();
        if(r!=null)
        {
        	logger.info("Am incarcat o regula");
        	if(crt_rule==rule_fwd)
			   rule_fwd=r;
			else
			   if(crt_rule==rule_bkd)
			       rule_bkd=r;
			//update all
				   update_actions();
				   update_results();
				   update_tokens();
        }
    }//GEN-LAST:event_jb_load_rule_diskActionPerformed

    /**
	 * @return
	 */
	private my_rule load_rule_from_disk() {
		// TODO Auto-generated method stub
		my_rule ret_rule=null;
		
		//open a file dialog
		/*load tree file */
			   if(rule_path==null)                        
				jc_rule=new JFileChooser();                        
						else
							jc_rule=new JFileChooser(rule_path);                        
					   //file filter settings
							   jc_rule.addChoosableFileFilter(rules_file_filter);
							   jc_rule.setAcceptAllFileFilterUsed(true);
							   jc_rule.setFileFilter(rules_file_filter);
		         //get a file                               
			if(jc_rule.showOpenDialog(null)==JFileChooser.APPROVE_OPTION)
			{
			 try{
			 	    File f=jc_rule.getSelectedFile();
                           rule_path=f.getPath();
                           			 	
						  FileInputStream istream = new FileInputStream(f);
						  ObjectInputStream p = new ObjectInputStream(istream);
                          						  					
                   //				read rule from file     
						   ret_rule=(my_rule) p.readObject();		           	    
						 //close streams
							 istream.close();
						  }
						  catch(Exception ex)
						  {
							  logger.error("Load failed: "+ex);
						  }                         	   	 		  	
			}           
		
		return ret_rule;
	}

	private void jb_save_rule_diskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_save_rule_diskActionPerformed
        // Add your handling code here:
        if(crt_rule!=null)
           {
              save_rule_to_disk(crt_rule);
           }
    }//GEN-LAST:event_jb_save_rule_diskActionPerformed

    /**
	 * @param crt_rule
	 */
	private void save_rule_to_disk(my_rule rl) {
		// TODO Auto-generated method stub
		if(rl!=null)
		{
		   //open save file dialog
		   //save tree
				if(rule_path==null)                        
			      jc_rule=new JFileChooser();                        
				else
				  jc_rule=new JFileChooser(rule_path);                        
							//file filter settings
							jc_rule.addChoosableFileFilter(rules_file_filter);
							jc_rule.setAcceptAllFileFilterUsed(true);
							jc_rule.setFileFilter(rules_file_filter);
										
							 if(jc_rule.showSaveDialog(null)==JFileChooser.APPROVE_OPTION)
					         {
								   try{
									File f=jc_rule.getSelectedFile();
									rule_path=f.getPath();
															 
								   FileOutputStream ostream = new FileOutputStream(f);
								   ObjectOutputStream p = new ObjectOutputStream(ostream);
								   p.writeObject(rl);                          
								   p.flush();
								   ostream.close();
								   }
								   catch(Exception ex)
								   {
									   logger.error("Save failed: "+ex);
								   }
							   }
		}
		
	}

	private void jb_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_refreshActionPerformed
        // Add your handling code here:
        
        update_actions();
        update_tokens();
        update_results();        
    }//GEN-LAST:event_jb_refreshActionPerformed

    private void jb_act_setActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_act_setActionPerformed
        // Add your handling code here:
        int sel_idx=list_actions.getSelectedIndex();
        action a;
        if(sel_idx!=-1)
        {
             a=crt_rule.getActionAt(sel_idx);
             a.setType(act_types.getSelectedIndex());
             crt_rule.setActionAt(a,sel_idx);
             update_results();
             update_actions();            
        }        
    }//GEN-LAST:event_jb_act_setActionPerformed

    private void jb_tok_setActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_tok_setActionPerformed
        // Add your handling code here:        
        int sel_idx=list_token.getSelectedIndex();        
        if(sel_idx!=-1)
        {             
            String text=jt_token.getText();
        int mtype;///match type
        int ttype;// token type
        my_token mt;
        patternToken pt;
        if(text!=null)
          if(text.length()>0)
          {
              mtype=token_match_type.getSelectedIndex();
              ttype=token_type.getSelectedIndex()+1;
              mt=new my_token(text,ttype);
              pt=new patternToken(mtype,mt);           
              crt_tokens.setElementAt(pt,sel_idx);              
              update_tokens();
              update_results();
              
          }                          
        }        
    }//GEN-LAST:event_jb_tok_setActionPerformed

    private void jb_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_exitActionPerformed
        // Add your handling code here:
        rules_saved=false;
        finished=1;
        this.hide();
    }//GEN-LAST:event_jb_exitActionPerformed

    private void jb_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_saveActionPerformed
        // Add your handling code here:
        rules_saved=true;
        finished=1;
        this.hide();
    }//GEN-LAST:event_jb_saveActionPerformed

    private void jb_tok_insertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_tok_insertActionPerformed
        // Add your handling code here:
         int sel_idx=list_token.getSelectedIndex();        
        if(sel_idx!=-1)
        {             
            String text=jt_token.getText();
        int mtype;///match type
        int ttype;// token type
        my_token mt;
        patternToken pt;
        if(text!=null)
          if(text.length()>0)
          {
              mtype=token_match_type.getSelectedIndex();
              ttype=token_type.getSelectedIndex()+1;
              mt=new my_token(text,ttype);
              pt=new patternToken(mtype,mt);           
              crt_tokens.insertElementAt(pt,sel_idx);              
              update_tokens();
              update_results();
              
          }                          
        }
    }//GEN-LAST:event_jb_tok_insertActionPerformed

    private void jb_tok_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_tok_deleteActionPerformed
        // Add your handling code here:
        int sel_idx=list_token.getSelectedIndex();
        
        if(sel_idx!=-1)
        {
             crt_tokens.removeElementAt(sel_idx);
             update_results();
             update_actions();            
             update_tokens();
        }
    }//GEN-LAST:event_jb_tok_deleteActionPerformed

    private void jb_tok_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_tok_addActionPerformed
        // Add your handling code here:
        String text=jt_token.getText();
        int mtype;///match type
        int ttype;// token type
        my_token mt;
        patternToken pt;
        if(text!=null)
          if(text.length()>0)
          {
              mtype=token_match_type.getSelectedIndex();
              ttype=token_type.getSelectedIndex()+1;
              mt=new my_token(text,ttype);
              pt=new patternToken(mtype,mt);
              //int idx=list_actions.getSelectedIndex();
              crt_tokens.add(pt);
              update_tokens();
              update_results();              
          }
        
    }//GEN-LAST:event_jb_tok_addActionPerformed

    private void list_actionsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_list_actionsValueChanged
        // Add your handling code here:        
        Vector acts;
        int idx=list_actions.getSelectedIndex();
        
        if(crt_rule!=null)
        {    
            acts=crt_rule.getActions();
        
        if(idx!=-1)
        {        	
        action a=(action)acts.get(idx);
        crt_tokens=a.getPattern();      
        logger.info("setez tipul actiunilor");
        act_types.setSelectedIndex(a.getType());          
        }
        }
        update_tokens();
    }//GEN-LAST:event_list_actionsValueChanged
    /*
	private void list_tokenValueChanged(javax.swing.event.ListSelectionEvent evt) {
			// Add your handling code here:        		        
			   int sel_idx=list_token.getSelectedIndex();        
			   if(sel_idx!=-1)
			   {             				   
			   int mtype;///match type
			   int ttype;// token type
			   
			   logger.info("Am ajuns in list_token_value changed");
			   
			   patternToken pt=(patternToken)crt_tokens.get(sel_idx);;
			   my_token mt=pt.getToken();
			   String text=mt.toString();
			   
			   ttype=mt.cod;
			   mtype=pt.getMatchType();
				
					 token_match_type.setSelectedIndex(mtype);
					 token_type.setSelectedIndex(ttype-1);
					  jt_token.setText(text);          					 
			   }        
		}
*/

    private void jb_act_insertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_act_insertActionPerformed
        // Add your handling code here:
        int sel_idx=list_actions.getSelectedIndex();
        action a;
        if(sel_idx!=-1)
        {
             a=new action(act_types.getSelectedIndex());
             crt_rule.insertActionAt(sel_idx,a);
             
             update_results();
             update_actions();            
        }
    }//GEN-LAST:event_jb_act_insertActionPerformed

    private void jb_act_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_act_deleteActionPerformed
        // Add your handling code here:
        int sel_idx=list_actions.getSelectedIndex();
        
        if(sel_idx!=-1)
        {
             crt_rule.removeAction(sel_idx);
             update_results();
             update_actions();            
        }
    }//GEN-LAST:event_jb_act_deleteActionPerformed

    private void jb_back_ruleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_back_ruleActionPerformed
        // Add your handling code here:
        crt_rule=rule_bkd;
        crt_tokens=new Vector();        
        update_results();
        update_actions();
        list_token.removeAll();
        
    }//GEN-LAST:event_jb_back_ruleActionPerformed

    private void jb_fwd_ruleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_fwd_ruleActionPerformed
        // Add your handling code here:
        crt_rule=rule_fwd;
        crt_tokens=new Vector();
        update_results();
        update_actions();
        list_token.removeAll();
    }//GEN-LAST:event_jb_fwd_ruleActionPerformed

    private void jb_act_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_act_addActionPerformed
        // Add your handling code here:
        action a;
        int t;
        
        t=act_types.getSelectedIndex();
        a=new action(t);
        crt_rule.addAction(a);
        
        update_results();      
        update_actions();
    }//GEN-LAST:event_jb_act_addActionPerformed
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        //System.exit(0);
        rules_saved=false;
        finished=1;        
        this.hide();        
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new ruleeditor().show();
    }
    
    
    public my_rule getForward()
    {
    	return rule_fwd;
    }
    public my_rule getBackward()
    {
    	return rule_bkd;
    }
    public boolean notfinished()
    {
    	return finished==0;
    }
    
    private void update_results() {
        String msg=new String();
        if(crt_rule==rule_fwd)
        {
            msg+="Foward Rule\n";
            
        }
        else
            msg+="Backward Rule\n";
        //----common
       msg+=crt_rule;
       result_pane.setText(msg);
    }
    
    private void update_actions() {
        Vector crt_acts=crt_rule.getActions();
        if(crt_acts!=null)
        list_actions.setListData(crt_rule.getActions());
        else
            list_actions.removeAll();
            
    }
        
    private void update_tokens() {        
        list_token.removeAll();
        
        if(crt_tokens!=null)
        list_token.setListData(crt_tokens);        
        
    }
    
    private my_rule crt_rule=null;
    private my_rule rule_fwd=new my_rule("FWD rule");
    private my_rule rule_bkd=new my_rule("BKD rule");
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox act_types;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane4;
    private javax.swing.JButton jb_act_add;
    private javax.swing.JButton jb_act_delete;
    private javax.swing.JButton jb_act_insert;
    private javax.swing.JButton jb_act_set;
    private javax.swing.JButton jb_back_rule;
    private javax.swing.JButton jb_exit;
    private javax.swing.JButton jb_fwd_rule;
    private javax.swing.JButton jb_load_rule_disk;
    private javax.swing.JButton jb_refresh;
    private javax.swing.JButton jb_save;
    private javax.swing.JButton jb_save_rule_disk;
    private javax.swing.JButton jb_tok_add;
    private javax.swing.JButton jb_tok_delete;
    private javax.swing.JButton jb_tok_insert;
    private javax.swing.JButton jb_tok_set;
    private javax.swing.JLabel jl_actions;
    private javax.swing.JTextField jt_token;
    private javax.swing.JLabel lb_act_type;
    private javax.swing.JLabel lb_match;
    private javax.swing.JLabel lb_pattern;
    private javax.swing.JLabel lb_token_text;
    private javax.swing.JLabel lb_token_type;
    private javax.swing.JList list_actions;
    private javax.swing.JList list_token;
    private javax.swing.JTextPane result_pane;
    private javax.swing.JComboBox token_match_type;
    private javax.swing.JComboBox token_type;
    // End of variables declaration//GEN-END:variables

    private Vector crt_tokens=null;    
    public boolean rules_saved=false;
    private int finished=0;
    
    private String rule_path=null;
    private ExampleFileFilter rules_file_filter;
    private JFileChooser jc_rule;
    
}
