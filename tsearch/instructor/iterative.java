package ro.cst.tsearch.instructor;

/*
 * iterative.java 
 *
 * author:
 *
 *deprecated
 * Created on July 17, 2003, 12:32 PM
 */

/**
 *
 * @author  Administrator
 */
import javax.swing.*;

import ro.cst.tsearch.wrapper2.HTML_region;
import ro.cst.tsearch.wrapper2.ExampleFileFilter;
import ro.cst.tsearch.wrapper2.builder_st2;
import ro.cst.tsearch.wrapper2.limits;
import ro.cst.tsearch.wrapper2.my_parser;
import ro.cst.tsearch.wrapper2.my_rule;
import ro.cst.tsearch.wrapper2.my_token;

import java.io.*;
import java.util.*;

import org.apache.log4j.Logger;

public class iterative extends javax.swing.JFrame //implements Runnable 
{
	private static final Logger logger = Logger.getLogger(iterative.class);
	
    /** Creates new form iterative */
    public iterative() {
        initComponents();
        //other inits
        //----file path settings---------
        last_path=null;
        filter=new ExampleFileFilter(new String[]{"htm","html"},"HTML files");
        //---other init
        Examples=new Vector();
    }
    public iterative(Vector HTML_toks)
    {
    	initComponents2();
    	HTML_tokens=new Vector(HTML_toks);
    	
    	if(HTML_tokens==null)
    	logger.info("hmm null tokens...");
    	
    	//----file path settings---------
        last_path=null;
        filter=new ExampleFileFilter(new String[]{"htm","html"},"HTML files");
        //---other init
        Examples=new Vector();
    }
        /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents2() {
        contentPane = new javax.swing.JSplitPane();
        token_Panels = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        lista_tokeni = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        lista_exemple = new javax.swing.JList();
        control_results = new javax.swing.JSplitPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        Page_controls = new javax.swing.JPanel();
        jb_browse = new javax.swing.JButton();
        lb_file = new javax.swing.JLabel();
        jb_zoom_out = new javax.swing.JButton();
        jb_zoom_in = new javax.swing.JButton();
        jb_add_to_examples = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        Example_controls = new javax.swing.JPanel();
        jb_delete_example = new javax.swing.JButton();
        jb_generate_rules = new javax.swing.JButton();
        jb_show_rules = new javax.swing.JButton();
        jb_show_results = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        Results_Pane = new javax.swing.JTextPane();

        setTitle("Iteration Rule generator");
        
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm();
            }
        });

        contentPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        contentPane.setMinimumSize(new java.awt.Dimension(800, 600));
        token_Panels.setMinimumSize(new java.awt.Dimension(800, 350));
        token_Panels.setPreferredSize(new java.awt.Dimension(800, 350));
        lista_tokeni.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);        
                
        jScrollPane1.setViewportView(lista_tokeni);        
        token_Panels.setLeftComponent(jScrollPane1);

        lista_exemple.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jScrollPane2.setViewportView(lista_exemple);

        token_Panels.setRightComponent(jScrollPane2);

        contentPane.setLeftComponent(token_Panels);

        control_results.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        control_results.setPreferredSize(new java.awt.Dimension(800, 150));
        Page_controls.setLayout(new java.awt.GridLayout(0, 2));        

        jb_zoom_out.setText("Zoom Out");
        jb_zoom_out.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_zoom_outActionPerformed();
            }
        });

        Page_controls.add(jb_zoom_out);

        jb_zoom_in.setText("Zoom in");
        jb_zoom_in.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_zoom_inActionPerformed();
            }
        });

        Page_controls.add(jb_zoom_in);

        jb_add_to_examples.setText("Add to Examples");
        jb_add_to_examples.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_add_to_examplesActionPerformed();
            }
        });

        Page_controls.add(jb_add_to_examples);

        Page_controls.add(jLabel1);

        jSplitPane1.setLeftComponent(Page_controls);

        jb_delete_example.setText("Delete Example");
        jb_delete_example.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_delete_exampleActionPerformed();
            }
        });

        Example_controls.add(jb_delete_example);

        jb_generate_rules.setText("Generate Rules");
        jb_generate_rules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_generate_rulesActionPerformed();
            }
        });
        
        Example_controls.add(jb_generate_rules);
        
        jb_quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_quitActionPerformed();
            }
        });

        Example_controls.add(jb_quit);

        jb_show_rules.setText("Show Rules");
        jb_show_rules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_show_rulesActionPerformed();
            }
        });

        Example_controls.add(jb_show_rules);

        jb_show_results.setText("Show Results");
        jb_show_results.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_show_resultsActionPerformed();
            }
        });

        Example_controls.add(jb_show_results);

        jSplitPane1.setRightComponent(Example_controls);

        control_results.setLeftComponent(jSplitPane1);

        jScrollPane3.setViewportView(Results_Pane);

        control_results.setRightComponent(jScrollPane3);

        contentPane.setRightComponent(control_results);

        getContentPane().add(contentPane, java.awt.BorderLayout.CENTER);

        pack();
    }

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        contentPane = new javax.swing.JSplitPane();
        token_Panels = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        lista_tokeni = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        lista_exemple = new javax.swing.JList();
        control_results = new javax.swing.JSplitPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        Page_controls = new javax.swing.JPanel();
        jb_browse = new javax.swing.JButton();
        lb_file = new javax.swing.JLabel();
        jb_zoom_out = new javax.swing.JButton();
        jb_zoom_in = new javax.swing.JButton();
        jb_add_to_examples = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        Example_controls = new javax.swing.JPanel();
        jb_delete_example = new javax.swing.JButton();
        jb_generate_rules = new javax.swing.JButton();
        jb_show_rules = new javax.swing.JButton();
        jb_show_results = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        Results_Pane = new javax.swing.JTextPane();

        setTitle("Iteration Rule generator");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm();
            }
        });

        contentPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        contentPane.setMinimumSize(new java.awt.Dimension(800, 600));
        token_Panels.setMinimumSize(new java.awt.Dimension(800, 350));
        token_Panels.setPreferredSize(new java.awt.Dimension(800, 350));
        lista_tokeni.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
                
        jScrollPane1.setViewportView(lista_tokeni);

        token_Panels.setLeftComponent(jScrollPane1);

        lista_exemple.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jScrollPane2.setViewportView(lista_exemple);

        token_Panels.setRightComponent(jScrollPane2);

        contentPane.setLeftComponent(token_Panels);

        control_results.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        control_results.setPreferredSize(new java.awt.Dimension(800, 150));
        Page_controls.setLayout(new java.awt.GridLayout(0, 2));

        jb_browse.setText("Browse...");
        jb_browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_browseActionPerformed();
            }
        });

        Page_controls.add(jb_browse);

        lb_file.setText("File:");
        Page_controls.add(lb_file);

        jb_zoom_out.setText("Zoom Out");
        jb_zoom_out.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_zoom_outActionPerformed();
            }
        });

        Page_controls.add(jb_zoom_out);

        jb_zoom_in.setText("Zoom in");
        jb_zoom_in.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_zoom_inActionPerformed();
            }
        });

        Page_controls.add(jb_zoom_in);

        jb_add_to_examples.setText("Add to Examples");
        jb_add_to_examples.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_add_to_examplesActionPerformed();
            }
        });

        Page_controls.add(jb_add_to_examples);

        Page_controls.add(jLabel1);

        jSplitPane1.setLeftComponent(Page_controls);

        jb_delete_example.setText("Delete Example");
        jb_delete_example.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_delete_exampleActionPerformed();
            }
        });

        Example_controls.add(jb_delete_example);

        jb_generate_rules.setText("Generate Rules");
        jb_generate_rules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_generate_rulesActionPerformed();
            }
        });

        Example_controls.add(jb_generate_rules);

        jb_show_rules.setText("Show Rules");
        jb_show_rules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_show_rulesActionPerformed();
            }
        });

        Example_controls.add(jb_show_rules);

        jb_show_results.setText("Show Results");
        jb_show_results.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_show_resultsActionPerformed();
            }
        });

        Example_controls.add(jb_show_results);

        jSplitPane1.setRightComponent(Example_controls);

        control_results.setLeftComponent(jSplitPane1);

        jScrollPane3.setViewportView(Results_Pane);

        control_results.setRightComponent(jScrollPane3);

        contentPane.setRightComponent(control_results);

        getContentPane().add(contentPane, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents

    private void jb_show_resultsActionPerformed() {//GEN-FIRST:event_jb_show_resultsActionPerformed
        // Add your handling code here:
        Vector results;
        HTML_region bigone=new HTML_region(HTML_tokens,(limits)zoom.peek(),(limits)zoom.peek());
        
        results=Iterative_extraction(bigone,forward,backward);
        
        int i;
        limits l;
        String outbuffer=new String();
        for(i=0;i<results.size();i++)
        {
            l=(limits)results.get(i);
            logger.info("Rec. "+i+": ");
            outbuffer+="Rec. "+i+": ";
            for(int k=l.getInf();k<=l.getSup();k++)
            {
                logger.info((my_token)HTML_tokens.get(k)+" ");
                outbuffer+=(my_token)HTML_tokens.get(k)+" ";
            }    
            logger.info("");
            outbuffer+="\n";
        }
        Results_Pane.setText(outbuffer);
    }//GEN-LAST:event_jb_show_resultsActionPerformed

    private void jb_show_rulesActionPerformed() {//GEN-FIRST:event_jb_show_rulesActionPerformed
        // Add your handling code here:
       Results_Pane.setText("FWD: "+forward+"\n"+"BKD: "+backward+"\n");        
    }//GEN-LAST:event_jb_show_rulesActionPerformed
    
    private void jb_quitActionPerformed() {//GEN-FIRST:event_jb_quitActionPerformed
        // Add your handling code here:
        
        save_rules=true;
          if(forward==null || backward==null)       
          {
             if(JOptionPane.YES_OPTION==JOptionPane.showConfirmDialog(null,"Rules not yet generated;Really quit ?","Quit iterative module",JOptionPane.YES_NO_OPTION))
               {
               	finished=1;
               	 this.hide();           	                    	 
               }
           }
           else
           {
           	 finished=1;
           	 this.hide();
           	   
           	}    
    }//GEN-LAST:event_jb_quitActionPerformed

    private void jb_generate_rulesActionPerformed() {//GEN-FIRST:event_jb_generate_rulesActionPerformed
        // Add your handling code here:
        builder_st2 bst2=new builder_st2();
        HTML_region exs[]=new HTML_region[Examples.size()];
        
        for(int i=0;i<Examples.size();i++)
            exs[i]=(HTML_region)Examples.get(i);
        
        forward=bst2.iter_Forward(exs);
        backward=bst2.iter_backWard(exs);
        
    }//GEN-LAST:event_jb_generate_rulesActionPerformed

    private void jb_delete_exampleActionPerformed() {//GEN-FIRST:event_jb_delete_exampleActionPerformed
        // Add your handling code here:
        //get selected examples
        selected_examples=lista_exemple.getSelectedIndices();
        //remove the selected examples from Vector & JList
        if(selected_examples!=null)
        {
            for(int i=selected_examples.length-1;i>=0;i--)
                Examples.removeElementAt(selected_examples[i]);                
               
            lista_exemple.setListData(Examples);
            
            String exs[]=new String[Examples.size()];
            for(int k=0;k<exs.length;k++)
                    exs[k]="Example "+(k+1)+": "+((HTML_region)Examples.get(k)).toString();                             
                lista_exemple.setListData(exs);    
        }
        
    }//GEN-LAST:event_jb_delete_exampleActionPerformed
        
    private void jb_add_to_examplesActionPerformed() {//GEN-FIRST:event_jb_add_to_examplesActionPerformed
        // Add your handling code here:
        //get current selection
        limits pg_lim;
        limits zn_lim;
        selected_tokens=lista_tokeni.getSelectedIndices();
        if(selected_tokens!=null) {
            zn_lim=new limits(start_idx+selected_tokens[0],
            start_idx+selected_tokens[0]+selected_tokens.length-1); 
            
            //check valid selection
            for(int j=zn_lim.getInf();j<=zn_lim.getSup();j++)            
                logger.info((my_token)HTML_tokens.get(j));
            logger.info("");
            
            //validate zone limits with other examples
            boolean valid_sel=true;
            /*
            if(!((zn_lim.getInf()>=pg_lim.getInf()) &&
            (zn_lim.getInf()<=pg_lim.getSup())) ||
            !((zn_lim.getSup()>=pg_lim.getInf()) &&
            (zn_lim.getSup()<=pg_lim.getSup()))) {
                logger.info("Selectie invalida!");
                valid_sel=false;
            }
             */
            limits other;
            for(int i=0;i<Examples.size();i++) {
                other=((HTML_region)Examples.get(i)).getZoneLimits();
                //test intersectie limite
                if(((zn_lim.getInf()>=other.getInf()) &&
                (zn_lim.getInf()<=other.getSup())) ||
                ((zn_lim.getSup()>=other.getInf()) &&
                (zn_lim.getSup()<=other.getSup())) ||
                ((other.getSup()>=zn_lim.getInf()) &&
                (other.getSup()<=zn_lim.getSup())) ||
                ((other.getInf()>=zn_lim.getInf()) &&
                (other.getInf()<=zn_lim.getSup()))) {
                    logger.info("Selectie invalida!");
                    valid_sel=false;
                }
            }
            //add to example list
            if(valid_sel) {
                logger.info("Adaug exemplu");
                //prin inserare
                if(Examples.size()==0)
                {
                  pg_lim=(limits)zoom.peek();
                  Examples.add(new HTML_region(HTML_tokens,pg_lim,zn_lim));
                }  
                else
                {
                    int i=0;                    
                    while(i<Examples.size())
                    {
                        other=((HTML_region)Examples.get(i)).getZoneLimits();
                        if(other.getInf()>zn_lim.getInf()) break;
                        i++;
                    }
                    
                    int li;
                    pg_lim=new limits();     
                    if(i>0)
                    {
                      li=((HTML_region)Examples.get(i-1)).getZoneLimits().getInf()+1;
                      pg_lim.setInf(li);
                    }  
                    else
                    {
                        pg_lim.setInf(((limits)zoom.peek()).getInf());
                    }                                          
                    pg_lim.setSup(((limits)zoom.peek()).getSup());
                    
                    if(i<Examples.size())//insert
                    {
                        Examples.insertElementAt(new HTML_region(HTML_tokens,pg_lim,zn_lim),i);
                    }
                    else//add
                    {
                        Examples.add(new HTML_region(HTML_tokens,pg_lim,zn_lim));
                    }                
                }
                
                Results_Pane.setText(" ");
                //add to examples list
                String exs[]=new String[Examples.size()];
                for(int k=0;k<exs.length;k++)
                    exs[k]="Example "+(k+1)+": "+((HTML_region)Examples.get(k)).toString();
                
                //lista_exemple.setListData(exs);
                lista_exemple.setListData(exs);
                lista_exemple.repaint();
                lista_exemple.repaint();
                logger.info(exs[0]);
                
            }
            else
                Results_Pane.setText("Selectie invalida!");
            
            //disable all buttons that are confusing (browse,zoom,...)
            
        }
    }//GEN-LAST:event_jb_add_to_examplesActionPerformed
    
    private void jb_zoom_outActionPerformed() {//GEN-FIRST:event_jb_zoom_outActionPerformed
        // Add your handling code here:
        
        //daca stiva are dimensiunea > 1
        if(zoom.size()>1) {
            zoom.pop();
            jb_zoom_out.setEnabled(true);
        }
        else //daca nu disable zoom out
            jb_zoom_out.setEnabled(false);
        
        //extrage dimensiuni din stiva
        logger.info("Zooming out");
        limits interval=(limits)zoom.peek();
        
        //actualizeaza tokeni
        start_idx=interval.getInf();
        
        my_token mt[]=new my_token[interval.getSup()-interval.getInf()+1];
        for(int i=0;i<mt.length;i++)
            mt[i]=(my_token)HTML_tokens.get(start_idx+i);
        
        logger.info("out["+start_idx+","+(start_idx+mt.length)+"]");
        //stabileste noua lista
        lista_tokeni.setListData(mt);
        lista_tokeni.repaint();
        jb_zoom_in.setEnabled(true);
    }//GEN-LAST:event_jb_zoom_outActionPerformed
    
    private void jb_zoom_inActionPerformed() {//GEN-FIRST:event_jb_zoom_inActionPerformed
        // Add your handling code here:
        //get selection
        selected_tokens=selected_tokens=lista_tokeni.getSelectedIndices();
        if(selected_tokens!=null) {
            logger.info("Zooming in...");
            //save limits
            start_idx=start_idx+selected_tokens[0];
            limits interval=new limits(start_idx,start_idx+selected_tokens.length-1);
            zoom.push(interval);
            //get new selected tokens
            my_token mt[]=new my_token[interval.getSup()-interval.getInf()+1];
            for(int i=0;i<mt.length;i++)
                mt[i]=(my_token)HTML_tokens.get(start_idx+i);
            //update display
            lista_tokeni.setListData(mt);
            lista_tokeni.repaint();
            jb_zoom_out.setEnabled(true);
            if(mt.length==1)
                jb_zoom_in.setEnabled(false);
        }
    }//GEN-LAST:event_jb_zoom_inActionPerformed
    
    private void jb_browseActionPerformed() {//GEN-FIRST:event_jb_browseActionPerformed
        // Add your handling code here:
        if(last_path==null)
            jc=new JFileChooser();
        else
            jc=new JFileChooser(last_path);
        //file filter settings
        jc.addChoosableFileFilter(filter);
        jc.setAcceptAllFileFilterUsed(true);
        jc.setFileFilter(filter);
        
        if(jc.showOpenDialog(null)==JFileChooser.APPROVE_OPTION) {
            try {
                File fr=jc.getSelectedFile();
                if(fr!=null) {
                    last_path=fr.getPath();
                    LoadFile(new FileReader(fr));
                    lb_file.setText(fr.getName());
                                     /*
                                      *enable buttons
                                      */
                }//if
            }//try
            catch(Exception ex) {
                logger.error("Exception in browsing HTML:"+ex);
            }
        }
    }//GEN-LAST:event_jb_browseActionPerformed

    /** Exit the Application */
    private void exitForm() {//GEN-FIRST:event_exitForm
        //System.exit(0);                  
        save_rules=false;
          this.hide();
          finished=1;        
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
     
     /*
    
     public static void main(String args[]) {
        new iterative().show();
    }
    */
    
    private void LoadFile(FileReader FR) {
        //open file
        String str=new String(""),tmp;
     //   int i;
        
        logger.info("Start loading...");
        //reset all counters
        //this is the offset in the vector of tokens
        //by default we display the entire HTML file
        start_idx=0;        
        zoom=new Stack();
        
        //Loading...
        try{
            BufferedReader   br=new BufferedReader(FR);
            logger.info("File opened.");
            while((tmp=br.readLine())!=null) {
                str+=tmp;
                str+="\n";
            }
            br.close();
        }
        catch(IOException f) {
            logger.error("Cannot open file: "+f);
        }
        logger.info("Done reading.");
        
        //Parsing...
        
        //String original_html_text=new String(str);
        ByteArrayInputStream bi=new ByteArrayInputStream(str.getBytes());
        my_parser mp=new my_parser((InputStream)bi);
        mp.parseEngine();
        
        //setting results
        logger.info("Done parsing.");
        HTML_tokens=mp.getResult();
        
        zoom.push(new limits(0,HTML_tokens.size()-1));
        
        logger.info("Start display List");
        lista_tokeni.setListData(HTML_tokens);
        logger.info("Done display parsed_tokens.");
        //logger.info("["+(my_token)HTML_tokens.get(2)+"]");
        repaint();
    }
    
    /** this function applies the extraction rules until there are no more
     * records;
     * return Vector of limits
     */
     /* old version
    public static Vector Iterative_extraction(HTML_region e,my_rule fwr,my_rule bkr)
   {
   	    int idx_start,idx_end,crt_idx;
   	    limits l1=e.getPageLimits(),l2;
   	    int i;
   	    //this contains the limits of the tokens
   	    Vector result_vector=new Vector();
   	  
   	     Vector toks=e.getTokens();
   	       
   	    idx_start=e.getPageLimits().getInf();
   	    idx_end=e.getPageLimits().getSup();
   	    
   	    builder_st2 bst2=new builder_st2();  
   	    
   	    Stack stiva;
   	    
   	    stiva=new Stack();
   	    i=idx_start;
   	    crt_idx=i;
   	    
   	    //forward search
   	    while(i<idx_end)
   	    {
   	    	crt_idx=bst2.applyForward(e,fwr);
   	    	if(crt_idx!=-1)
   	    	{
   	    		logger.info("Forward index:"+crt_idx);
   	    		stiva.push(new Integer(crt_idx));
   	    		i=crt_idx;   	    		
                        //back end search
                        l2=e.getPageLimits();
                        l1=new limits(crt_idx,l2.getSup());
                        e.setPageLimits(l1);
                        crt_idx=bst2.applyBackward(e,bkr);
                        logger.info("Backward index:"+crt_idx);
                        if(i!=-1)
                        {    
                          result_vector.add(new limits(i,crt_idx));
                          crt_idx=i+1;
                        }
                        
   	    	}
   	    	else
   	    	{
   	    	  i++;	
   	    	  crt_idx=i;
   	    	}  
   	    	
   	    	l1=e.getPageLimits();
   	    	l1.setInf(crt_idx);
   	    	e.setPageLimits(l1);   	    
   	    }
   	    return result_vector;
   	}       
    */
   public static Vector Iterative_extraction(HTML_region e,my_rule fwr,my_rule bkr)
   {
   	    int idx_start,idx_end,crt_idx;
   	    limits l1=e.getPageLimits(),l2;
   	    int i,recno;
   	    //this contains the limits of the tokens
   	    Vector result_vector=new Vector();
   	  
   	  //  Vector toks=e.getTokens();
   	       
   	    idx_start=e.getPageLimits().getInf();
   	    idx_end=e.getPageLimits().getSup();
   	    
   	    builder_st2 bst2=new builder_st2();  
   	       	       	    
   	    i=idx_start;
   	    crt_idx=i;
   	    
   	    //forward search
   	    recno=0;
   	    while(i<idx_end)
   	    {
   	    	crt_idx=bst2.applyForward(e,fwr);
   	    	if(crt_idx!=-1)
   	    	{
   	    		logger.info("Forward index:"+crt_idx);   	    
   	    		i=crt_idx;   	    		
                        //back end search
                        l2=e.getPageLimits();
                        l1=new limits(crt_idx,l2.getSup());
                        e.setPageLimits(l1);
                        
                        crt_idx=bst2.applyBackward(e,bkr);
                  //      logger.info("Backward index:"+crt_idx);
                        if(crt_idx!=-1)
                        {    
                          result_vector.add(new limits(i,crt_idx));
                          //set new page limits
                            l2=e.getPageLimits();
                            l1=new limits(crt_idx,l2.getSup());
                            
                            recno++;
                            logger.info(recno+": l1inf="+l1.getInf()+" l1sup="+l1.getSup());
                            e.setPageLimits(l1);
                            i=crt_idx;                           
                        }
                        
   	    	}
   	    	else
   	    	{
   	    	  i++;	
   	    	  crt_idx=i;
   	    	  l1=e.getPageLimits();
   	    	  l1.setInf(crt_idx);
   	    	  e.setPageLimits(l1);  
   	    	}     	    	   	    	 	    
   	    }
   	    return result_vector;
   	}
    
    public void run() {
        
        logger.info("Running itarative....");                
        zoom.push(new limits(0,HTML_tokens.size()-1));        
        logger.info("Start display List");
        lista_tokeni.setListData(HTML_tokens);
        this.show();                
        logger.info("Done itarative....");
    }
    public void showITModule()
    {
    	logger.info("Running itarative....");                
    	zoom.push(new limits(0,HTML_tokens.size()-1));  
    	logger.info("Start display List");
    	lista_tokeni.setListData(HTML_tokens);
    	this.show();    	  
    	  
    	logger.info("Done itarative....");    	    	
    }
    public boolean saved()
    {
       return save_rules;	
    }
    public my_rule getForward()
    {
    	return forward;
    }
    public my_rule getBackward()
    {
    	return backward;
    }
    public boolean notfinished()
    {
    	return finished==0;
    }
    
    private int finished=0;
    private int selected_examples[];
    private int selected_tokens[];
    private Vector HTML_tokens;
    private Stack zoom=new Stack();
    private int start_idx;
    private Vector Examples;
    //filechooser for html files
    /** File filter for HTML File open File dialog */
    private ExampleFileFilter filter;
    /** File Chooser for HTML */
    private JFileChooser jc;
    /** Path memory for HTML */
    private String last_path;
    /** forward rule for examples
     */    
    private my_rule forward=null;
    
    /** backward rule for examples **/
    private my_rule backward=null;
    
    /** quit button **/
     private JButton jb_quit=new JButton("Quit module");
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Example_controls;
    private javax.swing.JPanel Page_controls;
    private javax.swing.JTextPane Results_Pane;
    private javax.swing.JSplitPane contentPane;
    private javax.swing.JSplitPane control_results;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton jb_add_to_examples;
    private javax.swing.JButton jb_browse;
    private javax.swing.JButton jb_delete_example;
    private javax.swing.JButton jb_generate_rules;
    private javax.swing.JButton jb_show_results;
    private javax.swing.JButton jb_show_rules;
    private javax.swing.JButton jb_zoom_in;
    private javax.swing.JButton jb_zoom_out;
    private javax.swing.JLabel lb_file;
    private javax.swing.JList lista_exemple;
    private javax.swing.JList lista_tokeni;
    private javax.swing.JSplitPane token_Panels;
    // End of variables declaration//GEN-END:variables
    private boolean save_rules=false;
    
}
