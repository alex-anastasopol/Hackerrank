package ro.cst.tsearch.servlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Category;

import ro.cst.tsearch.Search;
import ro.cst.tsearch.SearchManager;
import ro.cst.tsearch.AutomaticTester.*;
import ro.cst.tsearch.bean.*;
import ro.cst.tsearch.data.User;
import ro.cst.tsearch.database.DBManager;
import ro.cst.tsearch.exceptions.BaseException;
import ro.cst.tsearch.servers.HashCountyToIndex;
import ro.cst.tsearch.utils.DBConstants;
import ro.cst.tsearch.utils.FileCopy;
import ro.cst.tsearch.utils.InstanceManager;
import ro.cst.tsearch.utils.RequestParams;
import ro.cst.tsearch.utils.SessionParams;
import ro.cst.tsearch.utils.TSOpCode;
import ro.cst.tsearch.utils.URLMaping;
import java.io.*;
import java.util.Date;

public class OpenTestCase extends BaseServlet {
    
	protected static final Category logger= Category.getInstance(AutomaticSearch.class.getName());
	public static final String testCasesFolder = "TestCases";
	public static final String errorCasesFolder = testCasesFolder + "Error" + File.pathSeparator;

	public void doRequest(HttpServletRequest request, HttpServletResponse response) throws Exception
	{       
	    HttpSession session = request.getSession(true);
        User currentUser = (User) session.getAttribute(SessionParams.CURRENT_USER);
	    String xmlfilename = request.getParameter( "xmlfilename" );
	    String savedFolder = request.getParameter( "savedFolder" );
	    Search openedSearch = null;
	    String forwardTo = "";
	    
	    if(xmlfilename != null)
	    {
	        if( savedFolder == null )
	        {
	            //open the etalon
	            openedSearch = AutomaticTesterManager.loadTestCase( xmlfilename );
	        }
	        else
	        {
	            //open a performed search candidate (stored in the folder recevied as a parameter
	            openedSearch = AutomaticTesterManager.loadCandidate( xmlfilename, savedFolder );
	        }
	    }
	    
	    if( openedSearch != null )
	    {
	        File sourceFolder = null;
	        if( savedFolder == null )
	        {
		        sourceFolder = new File(AutomaticTesterManager.testCaseFolder + File.separator + "ALLFILES_" + AutomaticTesterManager.getTestFolderName( xmlfilename ));
		        AutomaticTesterManager.copyFolder( AutomaticTesterManager.testCaseFolder + File.separator + "ALLFILES_" + AutomaticTesterManager.getTestFolderName( xmlfilename ), openedSearch.getSearchDir() );
	        }
	        else
	        {
		        sourceFolder = new File(AutomaticTesterManager.finishedTestCaseFolder + File.separator + "ALLFILES_" + AutomaticTesterManager.getTestFolderName( xmlfilename ) + File.separator + savedFolder);
		        AutomaticTesterManager.copyFolder( AutomaticTesterManager.finishedTestCaseFolder + File.separator + "ALLFILES_" + AutomaticTesterManager.getTestFolderName( xmlfilename ) + File.separator + savedFolder , openedSearch.getSearchDir() );
	        }
	        
	        Search newSearch = openedSearch;
	        /*
	        Search newSearch = SearchManager.addNewSearch( currentUser );
	        newSearch.setSa(new SearchAttributes(openedSearch.getOrigSA()));
	        newSearch.setOrigSA(new SearchAttributes(openedSearch.getOrigSA()));
	        
	        newSearch.resetSearchStatus();
	        
	        newSearch.setUpdate(false);
	        newSearch.setSearchStarted(false);
	        newSearch.setSearchType(Search.AUTOMATIC_SEARCH);

	        
	        ///////////////////////
	        
	        SearchAttributes sa = newSearch.getSa();      
	        			
	        newSearch.setAgent(currentUser.getUserAttributes());
	        newSearch.getSa().setOrderedBy(currentUser.getUserAttributes());

			try {
	            HashCountyToIndex.setSearchServer(newSearch, 0);
	        } catch (BaseException e2) {
	            e2.printStackTrace();
	        }
	        
		    
		    String sPath = getServletConfig().getServletContext().getRealPath(request.getContextPath());
		    newSearch.setTSDIndexPage( (TSDIndexPage) openedSearch.getTSDIndexPage().clone() );
		    AutomaticTesterManager.copyFolder( AutomaticTesterManager.testCaseFolder + File.separator + "ALLFILES_" + AutomaticTesterManager.getTestFolderName( xmlfilename ), newSearch.getSearchDir() );
		    
	        //TSD.initSearch(currentUser, newSearch, sPath, request);
		    */
	        newSearch.setUpdate(true);
	        newSearch.getSa().setAbstractor(currentUser.getUserAttributes());
	        currentUser.setSearch(newSearch);
		    InstanceManager.getManager().getCurrentInstance(newSearch.getID()).setCrtSearchContext(newSearch);
		    //# 1132
		    newSearch.constructSearchDirs( false );
		    try {
			    File lastTestFile = new File( AutomaticTesterManager.finishedTestCaseFolder + File.separator + xmlfilename );
				Date lastTestedDate = new Date( lastTestFile.lastModified() );
				newSearch.setTSROrderDate(lastTestedDate);			//B2235
		    } catch (Exception e) {}
		    
		    forwardTo = URLMaping.StartTSPage 
			    			+ "?" + "searchId" + "=" + newSearch.getSearchID()
					        	+ "&" + TSOpCode.OPCODE + "=" + TSOpCode.OPEN_SEARCH;
	    }
	    else
	    {
	        forwardTo = URLMaping.StartTSPage;
	    }
	    
		try {
		    forward(request, response, forwardTo);
		} catch (Exception e) {
		    e.printStackTrace();
		    forward(request, response, URLMaping.StartTSPage);
		}
	    
	    return;
	}
}
