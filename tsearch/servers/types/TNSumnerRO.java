/**
 * 
 */
package ro.cst.tsearch.servers.types;

import java.util.List;

import ro.cst.tsearch.bean.SearchAttributes;
import ro.cst.tsearch.search.filter.BetweenDatesFilterResponse;
import ro.cst.tsearch.search.filter.FilterResponse;
import ro.cst.tsearch.search.filter.newfilters.address.AddressFilterFactory;
import ro.cst.tsearch.search.filter.newfilters.date.LastTransferDateFilter;
import ro.cst.tsearch.search.filter.newfilters.legal.AcresFilterResponse;
import ro.cst.tsearch.search.filter.newfilters.legal.LegalFilterFactory;
import ro.cst.tsearch.search.filter.newfilters.pin.PINFilterFactory;
import ro.cst.tsearch.search.validator.DocsValidator;
import ro.cst.tsearch.servers.info.TSServerInfo;
import ro.cst.tsearch.servers.info.TSServerInfoModule;
import ro.cst.tsearch.utils.StringUtils;

/**
 * @author radu bacrau
 *
 */
public class TNSumnerRO extends TNGenericUsTitleSearchDefaultRO {

	private static final long serialVersionUID = 1L;

	/**
	 * @param searchId
	 */
	public TNSumnerRO(long searchId) {
		super(searchId);		
	}

	/**
	 * @param rsRequestSolverName
	 * @param rsSitePath
	 * @param rsServerID
	 * @param rsPrmNameLink
	 * @param searchId
	 * @param miServerID
	 */
	public TNSumnerRO(String rsRequestSolverName, String rsSitePath, String rsServerID, String rsPrmNameLink, long searchId, int miServerID) {
		super(rsRequestSolverName, rsSitePath, rsServerID, rsPrmNameLink, searchId, miServerID);
	}
	
	
	@Override
	protected void addExtraModuleAfterSubdivision(TSServerInfo serverInfo, List<TSServerInfoModule> modules) {
		//module generated by task 3945
		String street = getSearchAttribute(SearchAttributes.P_STREETNAME);
		String acres = getSearchAttribute(SearchAttributes.LD_ACRES);
		String district = getSearchAttribute(SearchAttributes.LD_DISTRICT);
		
		if( !"".equals( street ) && !StringUtils.isEmpty(acres) && !StringUtils.isEmpty(district) ){
			
			DocsValidator defaultLegalValidator = LegalFilterFactory.getDefaultLegalFilter(searchId).getValidator();
			DocsValidator pinValidator = PINFilterFactory.getPinFilter(searchId,true,true).getValidator(); 
			FilterResponse addressHighPassFilterResponse = AddressFilterFactory.getAddressHighPassFilter(searchId, 0.8d);
			DocsValidator addressHighPassValidator = addressHighPassFilterResponse.getValidator();
			DocsValidator lastTransferDateValidator = (new LastTransferDateFilter(searchId)).getValidator();
			DocsValidator recordedDateValidator = BetweenDatesFilterResponse.getDefaultIntervalFilter(searchId).getValidator();
			
			TSServerInfoModule module = new TSServerInfoModule(serverInfo.getModule(SUBD_MODULE_IDX));
			module.setSaObjKey(SearchAttributes.NO_KEY);
			module.clearSaKeys();
			module.getFunction(0).setParamValue( street.trim() );
			module.getFunction(6).setParamValue( district );
			module.addValidator(addressHighPassValidator);
			module.addValidator( defaultLegalValidator );
			module.addValidator(new AcresFilterResponse(SearchAttributes.LD_ACRES, searchId).getValidator());
			module.addValidator( recordedDateValidator );
	        module.addCrossRefValidator( defaultLegalValidator );
	        module.addCrossRefValidator( lastTransferDateValidator );
	        module.addCrossRefValidator( addressHighPassValidator );
	        module.addCrossRefValidator( pinValidator );
	        module.addCrossRefValidator( recordedDateValidator );
			modules.add(module);
		}
		
		
	}
}